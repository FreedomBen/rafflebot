#!/usr/bin/env ruby

require 'thor'
require 'securerandom'

require_relative 'raffle_bot_database'

class RafflebotCli < Thor
  class_option :user, type: :string

  desc "list", "List all raffles"
  def list
    puts "Raffles:\n``` - #{db.raffles.join("\n - ")}```"
  end

  desc "new <rafflename>", "Create a new raffle"
  def new(rafflename)
    db.create_raffle(rafflename, options[:user])
    if db.raffles.include?(rafflename)
      puts "Created new raffle `#{rafflename}`"
    else
      puts "Hmm, looks like creation of raffle `#{rafflename}` failed :disappointed:"
    end
  end

  desc "setting <rafflename> <setting-name>", "Print out value of <setting-name> for <rafflename>"
  def setting(rafflename, setting_name)
    return unless valid_raffle(rafflename)
    db.options(rafflename).each do |key, val|
      puts "#{val}" if key == setting_name
    end
  end

  desc "settings <rafflename>", "Print out settings and their values for <rafflename>"
  def settings(rafflename)
    return unless valid_raffle(rafflename)
    puts "Raffle: #{rafflename}\n```"
    db.options(rafflename).each do |key, val|
      puts "    #{key}: #{val}"
    end
    puts "```"
  end

  desc "set <rafflename> <setting> <value>", "Set the <value> of <setting> for <rafflename>"
  def set(rafflename, setting, value)
    return unless valid_raffle(rafflename)
    newval = value.dup
    newval = false if value.downcase == 'false'
    newval = true  if value.downcase == 'true'
    db.set_option(options[:user], rafflename, setting, newval)
    if db.get_option(rafflename, setting) == newval
      puts "Success!  Changed `#{setting}` to `#{value}` for raffle `#{rafflename}`"
    else
      puts "Hmm, it looks like the setting of `#{setting}` to `#{value}` for raffle `#{rafflename}` failed :disappointed:"
    end
  end

  desc "winners <rafflename>", "Display list of previous winners of <rafflename>"
  def winners(rafflename)
    return unless valid_raffle(rafflename)
    winners = db.winners_with_number(rafflename).inject([]) do |acc, val|
                acc.push("\n#{val[:number]}: #{val[:name]}")
              end
    puts "Winners:#{winners.join}"
  end

  desc "pick_winner <rafflename>", "Draw a name for a new raffle winner for <rafflename>"
  def pick_winner(rafflename, *possible_users)
    return unless valid_raffle(rafflename)
    winner = if db.get_option(rafflename, 'allow_dup_winners')
               possible_users[SecureRandom.random_number(possible_users.length)]
             else
               pos_users = possible_users.dup
               db.winners(rafflename).each { |w| pos_users.delete(w) }
               pos_users[SecureRandom.random_number(pos_users.length)]
             end
    if winner
      if db.add_winner(options[:user], rafflename, winner)
        puts "New winner is #{winner}!"
      else
        puts "Selection of a winner failed.  Are you authorized?"
      end
    else
      puts "Every user in the channel has already won!"
    end
  end

  desc "insert_winner <rafflename> <winner>", "Insert <winner> as a winner of <rafflename>"
  def insert_winner(rafflename, winner)
    return unless valid_raffle(rafflename)

    if winner
      if db.add_winner(options[:user], rafflename, winner)
        puts "New winner is #{winner}!"
      else
        puts "Could not insert winner.  Are you authorized?"
      end
    else
      puts "You must specify a winner :laughing:"
    end
  end

  desc "clear <rafflename>", "Clear the list of winners for <rafflename>"
  def clear(rafflename)
    return unless valid_raffle(rafflename)
    db.clear(options[:user], rafflename)
    puts "Cleared raffle '#{rafflename}'"
  end

  desc "delete <rafflename>", "Delete <rafflename>"
  def delete(rafflename)
    return unless valid_raffle(rafflename)
    db.delete(options[:user], rafflename)
    puts "Deleted raffle '#{rafflename}'"
  end

  desc "register <rafflename> [user]", "Register self (or user if specified) in the specified raffle"
  def register(rafflename, user=nil)
    # if the user owns the raffle, they can register others.  if not, they can only register themselves

  end

  private
  def db
    @db ||= RaffleBotDatabase.new
    @db
  end

  private
  def valid_raffle(rafflename)
    return true if db.raffles.include?(rafflename)
    puts "Invalid rafflename '#{rafflename}'.  You might need to create it first with `rafflebot new #{rafflename}`"
    false
  end
end

RafflebotCli.start(ARGV)
